volumes:
  vol-emqx-data:
    name: foo-emqx-data
  vol-emqx-etc:
    name: foo-emqx-etc
  certs:
    name: vol-certs
  mongodata:
    name: vol-mongodata
  #this sections is to declare the folders which initial contents we want to keep for data persistence
  #the first time, if not volumes created, creates these volumes with the instructions given below.
  #Next time, it uses these and override. Volumes created at emqx and renamed as first parameter here
 
services:
 
  mongo:
    container_name: mongoDB
    image: mongo:5.0.18 #7.0.4
    restart: always
    environment:
      TZ: "America/Panama/Panama"
      MONGO_INITDB_ROOT_USERNAME: '${MONGO_USERNAME}'
      MONGO_INITDB_ROOT_PASSWORD: '${MONGO_PASSWORD}'
    ports:
      - "${MONGO_EXT_PORT}:27017"
      #Ports: STD port for Mongo  
    #command: ["mongod", "--port", "27018"]  to force start at 18         
    volumes:
      - mongodata:/data/db     
      #- ./mongoDB/db:/data/db
 
  emqx:
    container_name: emqx
    image: emqx/emqx:4.4.18
    #restart: always
    ports:
      - '18083:18083'      ##puerto por donde entro al dashboard emqx   ssl 18083:18083 http
      - '1883:1883'
      - '8883:8883'                                                   # tcp  1883:1883 tcp
      - '8083:8083'                                                   # tcp ssl 8883:1883 tcp
      - '8085:8081'
    #VOLUMES EXAMPLE: - ./newLocalFolder:/opt/emqx/etc
    #left side for local data : right side for container data to be linked to, for overriding
    #first time newLocalFolder will be empty and nothing will be copied onto opt/emqx/etc.
    # Use env variables to set the initial values for the config parameters. Passwords in .env 
    #IMPORTANT: volumes management require EMQX_NAME and EMQX_HOST environment variables
    volumes:
      - vol-emqx-data:/opt/emqx/data
      - vol-emqx-etc:/opt/emqx/etc
      - certs:/opt/emqx/etc/certs
      #- vol-emqx-log:/opt/emqx/log
    links:
      - mongo #connects EMQX to mongo network
    depends_on:
      - mongo
 
    environment: 
      #The 2 environment variables below are mandatory for this to work. Found at opt/emqx/etc/emqx.conf
      #environment variables to be linked to in the container from the .env file next to this one
      #you can find the variable names in hub.docker.com/containerName, see above for EMQX particular nomenclature rules
      EMQX_NAME: EMQX_PLANT
      EMQX_HOST: 127.0.0.1
      TZ: "America/Panama/Panama"
 
      #listener.tcp.external.max_connections
      EMQX_LISTENER__TCP__EXTERNAL__MAX_CONNECTIONS: ${TCPEXTMAX}
      EMQX_LISTENER__TCP__INTERNAL__MAX_CONNECTIONS: ${TCPINTMAX}
      #listener.ssl.external.max_connections
      EMQX_LISTENER__SSL__EXTERNAL__MAX_CONNECTIONS: ${SSLMAX}
      EMQX_LISTENER__WS__EXTERNAL__MAX_CONNECTIONS: ${WSMAX}
      EMQX_LISTENER__WSS__EXTERNAL__MAX_CONNECTIONS: ${WSSMAX}
      
      #disable websocket connections with no username or credentials
      EMQX_ALLOW_ANONYMOUS: "false"
      #disable free subscriptions
      EMQX_NOMATCH: "deny"
 
      #here, USER AND PASSWORD WITH DATA PERSISTENCE: Other .conf file found at opt/emqx/etc/plugins/emqx_dashboard.conf
      EMQX_DASHBOARD__DEFAULT_USER__LOGIN: '${emqxUser}' #dashboard.default_user.login = admin
      EMQX_DASHBOARD__DEFAULT_USER__PASSWORD: '${emqxPassword}'  #dashboard.default_user.password = public      #LINK/CONNECTION TO MONGO  (file at opt/emqx/etc/pluggins/emqx_auth_mongo.conf)
      EMQX_AUTH__MONGO__TOPOLOGY__POOL_SIZE: 1
      EMQX_AUTH__MONGO__TOPOLOGY__MAX__OVERFLOW: 0
 
      EMQX_AUTH__MONGO__TYPE: single
      EMQX_AUTH__MONGO__SERVER: "mongo:${MONGO_EXT_PORT}"
      WMQX_AUTH__MONGO__POOL: 8
 
      EMQX_AUTH__MONGO__LOGIN: '${MONGO_USERNAME}'
      EMQX_AUTH__MONGO__PASSWORD: '${MONGO_PASSWORD}'
      EMQX_AUTH__MONGO__AUTH_SOURCE: admin
      #admin is the mongo default database for authentication 
 
      #name of Mongo database, create a DB with same name in mongo
      EMQX_AUTH__MONGO__DATABASE: "ioticosgodlevel"
      EMQX_AUTH__MONGO__AUTH_QUERY__COLLECTION: "emqxauthrules" #collecton with credentials for emq
 
      #won't be used but settings are given
      EMQX_AUTH__MONGO__SUPER_QUERY__COLLECTION: "emqxauthrules"
      EMQX_AUTH__MONGO__SUPER_QUERY__SUPER_FIELD: "is_superuser"
      EMQX_AUTH__MONGO__SUPER_QUERY__SELECTOR: "username=%u"  #%u is how EMQX stores user names
      EMQX_AUTH__MONGO__SUPER_QUERY: "off"    #turns off super users after setting it
 
      #EMQX_AUTH__MONGO__URL: "mongodb://mongoDB:27018"  #suggested by chatgpt
      EMQX_AUTH__MONGO__AUTH_QUERY__PASSWORD_HASH: plain  #plain for no encription of passwords stored in db
      EMQX_AUTH__MONGO__AUTH_QUERY__PASSWORD_FIELD: "password"  #field name in db for storing passwords
      EMQX_AUTH__MONGO__AUTH_QUERY__SELECTOR: "username=%u"   #field name in the DB for storing username
     
      #Enable ACL query (Access Control List) 
      EMQX_AUTH__MONGO__ACL_QUERY: "on" #enables MongoDB ACL authentication
          #auth.mongo.acl_query.collection = mqtt_acl
      EMQX_AUTH__MONGO__ACL_QUERY__COLLECTION: "emqxauthrules"  #collection where to find subscribe and publish data 
          #auth.mongo.acl_query.selector
      EMQX_AUTH__MONGO__ACL_QUERY__SELECTOR: "username=%u"  #match for username in the collection
      EMQX_LOADED_PLUGINS: "emqx_recon,emqx_retainer,emqx_managment,emqx_auth_mongo,emqx_dashboard"
      #recon for auto reconn, retainer for retained messages, management for EMQX  API, and mongo auth
